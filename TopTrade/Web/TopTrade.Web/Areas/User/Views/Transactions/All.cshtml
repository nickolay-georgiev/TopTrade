@model TopTrade.Web.ViewModels.User.Stock.TradeHistoryViewModel

@{
    ViewData["Title"] = "Transactions Page";
    ViewData["PageName"] = "Transactions";
}

<div class="app-content content">
    <div class="transactions-content-wrapper">
        <partial name="_NavigationPartial" view-data="ViewData">
            <div class="content-body">
                <section id="all-transactions">
                    <div class="row">
                        <div class="col-12">
                            <div class="transactions-deposit-card">
                                <div class="card-header">
                                    <h4 class="card-title">Transactions Details</h4>
                                </div>
                                <div class="card-content mt-1">
                                    <div class="table-responsive">
                                        <table id="crypto-transaction" class="table table-hover table-xl trans-wrapper">
                                            <thead>
                                                <tr>
                                                    <th class="border-top-0">ID</th>
                                                    <th class="border-top-0">Type</th>
                                                    <th class="border-top-0">Ticker</th>
                                                    <th class="border-top-0">Quantity</th>
                                                    <th class="border-top-0">Open Price</th>
                                                    <th class="border-top-0">Close Price</th>
                                                    <th class="border-top-0">Total ($)</th>
                                                    <th class="border-top-0">Profit/Loss ($)</th>
                                                    <th class="border-top-0">Fee ($)</th>
                                                    <th class="border-top-0">Status</th>
                                                    <th class="border-top-0">Time</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var trade in Model.Trades)
                                                {
                                                <tr>
                                                    <td>
                                                        <div class="Trans-id">#@trade.Id</div>
                                                    </td>
                                                    <td>
                                                        <div class="trans-type success font-weight-bold">
                                                            <span custom-color>@trade.TradeType</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="trans-type success">
                                                            <span>@trade.StockTicker</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="amount">
                                                            <i class="la la-bitcoin"></i>@trade.Quantity
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="price">@trade.OpenPrice</div>
                                                    </td>
                                                    <td>
                                                        <div class="price">@trade.ClosePrice.ToString("f2")</div>
                                                    </td>
                                                    <td>
                                                        <div class="usd">@trade.TotalPrice</div>
                                                    </td>
                                                    <td>
                                                        <div class="usd"><span custom-color>@trade.Balance.ToString("f2")</span></div>
                                                    </td>
                                                    <td>
                                                        <div class="fee">@trade.SwapFee.ToString("f2")</div>
                                                    </td>
                                                    <td>
                                                        <div class="status badge badge-success badge-pill badge-sm">Completed</div>
                                                    </td>
                                                    <td>
                                                        <div class="time">@trade.CloseDate.ToLocalTime()</div>
                                                    </td>
                                                </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="row">
                                        <div class="col-12">
                                            <partial name="_PagingPartial" model="@Model" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <section class="chart-wrapper ml-4 row mb-5 mt-3 d-flex justify-content-between">

                                <div class="chart-card col-md-5 pl-0 pie-chart-div theDiv">
                                    <div class="zoom-chart text-right mt-2 mr-2">
                                        <i class="fas fa-search-plus text-secondary"></i>
                                    </div>
                                    <div class="chart-container">
                                        <canvas id="line-chart"></canvas>
                                    </div>
                                </div>

                                <div class="chart-card col-md-6 mr-5 bar-chart-div theDiv">
                                    <div class="zoom-chart text-right mt-2 mr-2">
                                        <i class="fas fa-search-plus text-secondary"></i>
                                    </div>
                                    <div class="chart-container">
                                        <canvas id="bar-chart"></canvas>
                                    </div>
                                </div>

                            </section>
                        </div>
                    </div>
                </section>
            </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">

        window.onload = function () {

            function generateBarChart() {
                   var dataDto = @Html.Raw(Model.ProfitLossBarChartViewModel);

            const date = new Date();
            const chartName = "bar-chart";
            let ctx = document.getElementById(chartName)
            let clicks = 0;

            var dataModel = [
                {
                    buyCount :0,
                    sellCount: 0,
                    month: 'January'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'February'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'March'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'April'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'May'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'June'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'July'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'August'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'September'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'October'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'November'
                },
                {
                    buyCount: 0,
                    sellCount: 0,
                    month: 'December'
                },
            ];

            for (var record in dataDto) {
                let currentMonth = dataModel.find(x => x.month == dataDto[record].Month);
                currentMonth.buyCount = dataDto[record].BuyCount;
                currentMonth.sellCount = dataDto[record].SellCount;
            }

            dataModel = dataModel.slice(0, date.getMonth() + 1);

            ctx = ctx.getContext('2d');
            const DATA_COUNT = 7;

            const labels = [...dataModel.map(x => x.month)];
            const data = {
                labels: labels,
                datasets: [
                    {
                        label: 'BUY TRADES',
                        data: [...dataModel.map(x => x.buyCount)],
                        borderColor: "rgba(40,230,154,.6)",
                        backgroundColor: "rgba(22,211,154,.6)",
                    },
                    {
                        label: 'SELL TRADES',
                        data: [...dataModel.map(x => x.sellCount)],
                        borderColor: "rgba(255, 200, 180, .6)",
                        backgroundColor: "rgba(255, 160, 180, .6)",
                    }
                ]
            };

            const options = {
                type: 'bar',
                data: data,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                    }
                },
            };

            var myChart = new Chart(ctx, {
                options: options,
                data: data,
                type: 'bar'

            });

            document.querySelectorAll('.zoom-chart > i').forEach(x => x.addEventListener('click', (function (e) {

                let parent = e.target.parentElement.parentElement;

                if (clicks % 2 == 0) {
                    parent.classList.add('zoom');
                    document.querySelector('.transactions-deposit-card').style.display = 'none';
                    if (parent.classList.contains('bar-chart-div')) {
                        document.querySelector('.pie-chart-div').style.display = 'none';
                        parent.classList.remove('col-md-6');

                    } else {
                        document.querySelector('.bar-chart-div').style.display = 'none';
                        parent.classList.remove('col-md-5');
                        parent.classList.add('zoom-one');
                    }
                } else {
                    parent.classList.remove('zoom');
                    document.querySelector('.transactions-deposit-card').style.display = 'block';
                    if (parent.classList.contains('bar-chart-div')) {
                        document.querySelector('.pie-chart-div').style.display = 'block';
                        parent.classList.add('col-md-6');
                        parent.display = 'block';

                    } else {
                        document.querySelector('.pie-chart-div').style.display = 'block';
                        document.querySelector('.bar-chart-div').style.display = 'block';
                        parent.classList.add('col-md-5');
                        parent.classList.remove('zoom-one');
                    }
                }
                clicks++;
            })));
            }
            generateBarChart();

            function generateLineChart() {

                var dataDto = @Html.Raw(Model.MonthlyWalletPerformanceChartViewModel);
                var dataModel = [
                    {
                        balance: 0,
                        month: 'January'
                    },
                    {
                        balance: 0,
                        month: 'February'
                    },
                    {
                        balance: 0,
                        month: 'March'
                    },
                    {
                        balance: 0,
                        month: 'April'
                    },
                    {
                        balance: 0,
                        month: 'May'
                    },
                    {
                        balance: 0,
                        month: 'June'
                    },
                    {
                        balance: 0,
                        month: 'July'
                    },
                    {
                        balance: 0,
                        month: 'August'
                    },
                    {
                        balance: 0,
                        month: 'September'
                    },
                    {
                        balance: 0,
                        month: 'October'
                    },
                    {
                        balance: 0,
                        month: 'November'
                    },
                    {
                        balance: 0,
                        month: 'December'
                    },
                ];

                for (var record in dataDto) {
                   let currentMonth = dataModel.find(x => x.month == dataDto[record].Month);
                    currentMonth.balance = dataDto[record].Balance;
                }

                const monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
                ];

                const date = new Date();
                dataModel = dataModel.slice(0, date.getMonth() + 1);

                const labels = monthNames;
                const data = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'ACCOUNT PERFORMANCE',
                            data: dataModel.map(x => x.balance),
                            borderColor: "rgba(10, 160, 180, .6)",
                            backgroundColor: "rgba(2, 160, 180, .3)",
                        },
                    ]
                };

                const options = {
                    type: 'line',
                    data: data,
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Chart.js Line Chart'
                            }
                        }
                    },
                };

                let ctx = document.getElementById('line-chart')
                var myChart = new Chart(ctx, {
                    options: options,
                    data: data,
                    type: 'line'

                });
            }
            generateLineChart();
        };
    </script>
}
